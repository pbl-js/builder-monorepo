// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../apps/builder-api/src/@generated"
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  content     String?
  published   Boolean  @default(false)
  authorId    Int
  User        User     @relation(fields: [authorId], references: [id])
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  userId Int     @unique
  User   User    @relation(fields: [userId], references: [id])
}

model User {
  id      Int      @id @default(autoincrement())
  name    String?  @db.VarChar(255)
  email   String   @unique @db.VarChar(255)
  Post    Post[]
  Profile Profile?
}

// Builder //

enum ComponentType {
  TEXT
  IMAGE
  CUSTOM
}

model Props {
  id          Int       @id @default(autoincrement())
  component   Component @relation(fields: [componentId], references: [id])
  componentId Int       @unique


  width        String
  height       String
  marginTop    String
  marginRight  String
  marginBottom String
  marginLeft   String
}

model Component {
  id            Int           @id @default(autoincrement())
  componentType ComponentType
  Section       Section?      @relation(fields: [sectionId], references: [id])
  sectionId     Int?
  props         Props?
}

model ComponentsOrder {
  id                Int               @id @default(autoincrement())
  componentId       String
  nestedComponents  ComponentsOrder[] @relation("ComponentsOrderToComponentsOrder")
  componentsOrder   ComponentsOrder?  @relation("ComponentsOrderToComponentsOrder", fields: [componentsOrderId], references: [id])
  componentsOrderId Int?
  section           Section?          @relation(fields: [sectionId], references: [id])
  sectionId         Int?
}

model Section {
  id              Int               @id @default(autoincrement())
  name            String
  destinationUrl  String            @default("http://localhost:1111/graphql")
  components      Component[]
  componentsOrder ComponentsOrder[]
}
